{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","super-rentals/tests/acceptance/list-rentals-test.js","super-rentals/tests/app.lint-test.js","super-rentals/tests/helpers/destroy-app.js","super-rentals/tests/helpers/module-for-acceptance.js","super-rentals/tests/helpers/resolver.js","super-rentals/tests/helpers/start-app.js","super-rentals/tests/integration/components/list-filter-test.js","super-rentals/tests/integration/components/location-map-test.js","super-rentals/tests/integration/components/rental-listing-test.js","super-rentals/tests/integration/helpers/rental-property-type-test.js","super-rentals/tests/test-helper.js","super-rentals/tests/tests.lint-test.js","super-rentals/tests/unit/adapters/application-test.js","super-rentals/tests/unit/controllers/rentals-test.js","super-rentals/tests/unit/controllers/rentals/index-test.js","super-rentals/tests/unit/models/rental-test.js","super-rentals/tests/unit/routes/about-test.js","super-rentals/tests/unit/routes/contact-test.js","super-rentals/tests/unit/routes/index-test.js","super-rentals/tests/unit/routes/rentals-test.js","super-rentals/tests/unit/routes/rentals/index-test.js","super-rentals/tests/unit/routes/rentals/show-test.js","super-rentals/tests/unit/services/maps-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('super-rentals/tests/acceptance/list-rentals-test', ['qunit', 'super-rentals/tests/helpers/module-for-acceptance'], function (_qunit, _moduleForAcceptance) {\n  'use strict';\n\n  var StubMapsService = Ember.Service.extend({\n    getMapElement: function getMapElement() {\n      return document.createElement('div');\n    }\n  });\n\n  (0, _moduleForAcceptance.default)('Acceptance | list rentals', {\n    beforeEach: function beforeEach() {\n      this.application.register('service:stubMaps', StubMapsService);\n      this.application.inject('component:location-map', 'maps', 'service:stubMaps');\n    }\n  });\n\n  (0, _qunit.test)('should show rentals as the home page', function (assert) {\n    visit('/');\n    andThen(function () {\n      // console.log(currentURL() === '/rentals');\n      assert.equal(currentURL(), '/rentals', 'should redirect automatically');\n    });\n  });\n\n  (0, _qunit.test)('should link to information about the company.', function (assert) {\n    visit('/');\n    click('a:contains(\"About\")');\n    andThen(function () {\n      assert.equal(currentURL(), '/about', 'should navigate to about');\n    });\n  });\n\n  (0, _qunit.test)('should link to contact information.', function (assert) {\n    visit('/');\n    click('a:contains(\"Contact\")');\n    andThen(function () {\n      assert.equal(currentURL(), '/contact', 'should navigate to contact');\n    });\n  });\n\n  (0, _qunit.test)('should list available rentals.', function (assert) {\n    visit('/');\n    andThen(function () {\n      assert.equal(find('.listing').length, 3, 'should see 3 listings');\n    });\n  });\n\n  (0, _qunit.test)('should filter the list of rentals by city.', function (assert) {\n    visit('/');\n    fillIn('.list-filter input', 'seattle');\n    keyEvent('.list-filter input', 'keyup', 69);\n    andThen(function () {\n      assert.equal(find('.listing').length, 1, 'should show 1 listing');\n      assert.equal(find('.listing .location:contains(\"Seattle\")').length, 1, 'should contain 1 listing with location Seattle');\n    });\n  });\n\n  (0, _qunit.test)('should show details for a selected rental', function (assert) {\n    visit('/rentals');\n    click('a:contains(\"Grand Old Mansion\")');\n    andThen(function () {\n      assert.equal(currentURL(), '/rentals/grand-old-mansion', 'should navigate to show route');\n      assert.equal(find('.show-listing h2').text(), \"Grand Old Mansion\", 'should list rental title');\n      assert.equal(find('.description').length, 1, 'should list a description of the property');\n    });\n  });\n});","define('super-rentals/tests/app.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('adapters/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/list-filter.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/list-filter.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/location-map.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/location-map.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/rental-listing.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/rental-listing.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/rentals.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/rentals.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/rentals/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/rentals/index.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/rental-property-type.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/rental-property-type.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/rental.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/rental.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/about.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/about.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/contact.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/contact.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/index.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/rentals.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/rentals.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/rentals/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/rentals/index.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/rentals/show.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/rentals/show.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('services/maps.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/maps.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('utils/google-maps.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'utils/google-maps.js should pass ESLint\\n\\n');\n  });\n});","define('super-rentals/tests/helpers/destroy-app', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = destroyApp;\n  function destroyApp(application) {\n    Ember.run(application, 'destroy');\n    if (window.server) {\n      window.server.shutdown();\n    }\n  }\n});","define('super-rentals/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'super-rentals/tests/helpers/start-app', 'super-rentals/tests/helpers/destroy-app'], function (exports, _qunit, _startApp, _destroyApp) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  exports.default = function (name) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _startApp.default)();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return resolve(afterEach).then(function () {\n          return (0, _destroyApp.default)(_this.application);\n        });\n      }\n    });\n  };\n\n  var resolve = Ember.RSVP.resolve;\n});","define('super-rentals/tests/helpers/resolver', ['exports', 'super-rentals/resolver', 'super-rentals/config/environment'], function (exports, _resolver, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n\n  var resolver = _resolver.default.create();\n\n  resolver.namespace = {\n    modulePrefix: _environment.default.modulePrefix,\n    podModulePrefix: _environment.default.podModulePrefix\n  };\n\n  exports.default = resolver;\n});","define('super-rentals/tests/helpers/start-app', ['exports', 'super-rentals/app', 'super-rentals/config/environment'], function (exports, _app, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = startApp;\n  function startApp(attrs) {\n    var attributes = Ember.merge({}, _environment.default.APP);\n    attributes = Ember.merge(attributes, attrs); // use defaults, but you can override;\n\n    return Ember.run(function () {\n      var application = _app.default.create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n      return application;\n    });\n  }\n});","define('super-rentals/tests/integration/components/list-filter-test', ['ember-qunit', 'ember-test-helpers/wait'], function (_emberQunit, _wait) {\n  'use strict';\n\n  var ITEMS = [{ city: 'San Francisco' }, { city: 'Portland' }, { city: 'Seattle' }];\n  var FILTERED_ITEMS = [{ city: 'San Francisco' }];\n\n  (0, _emberQunit.moduleForComponent)('list-filter', 'Integration | Component | list filter', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('should initially load all listings', function (assert) {\n    var _this = this;\n\n    this.on('filterByCity', function () {\n      return Ember.RSVP.resolve({ results: ITEMS });\n    });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"1hr1VD49\",\n      \"block\": \"{\\\"symbols\\\":[\\\"results\\\",\\\"item\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"list-filter\\\",null,[[\\\"filter\\\"],[[25,\\\"action\\\",[[19,0,[]],\\\"filterByCity\\\"],null]]],{\\\"statements\\\":[[0,\\\"      \\\"],[6,\\\"ul\\\"],[7],[0,\\\"\\\\n\\\"],[4,\\\"each\\\",[[19,1,[]]],null,{\\\"statements\\\":[[0,\\\"        \\\"],[6,\\\"li\\\"],[9,\\\"class\\\",\\\"city\\\"],[7],[0,\\\"\\\\n          \\\"],[1,[19,2,[\\\"city\\\"]],false],[0,\\\"\\\\n        \\\"],[8],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[2]},null],[0,\\\"      \\\"],[8],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    return (0, _wait.default)().then(function () {\n      assert.equal(_this.$('.city').length, 3);\n      assert.equal(_this.$('.city').first().text().trim(), 'San Francisco');\n    });\n  });\n\n  (0, _emberQunit.test)('should update with matching listings', function (assert) {\n    var _this2 = this;\n\n    this.on('filterByCity', function (val) {\n      if (val === '') {\n        return Ember.RSVP.resolve({\n          query: val,\n          results: ITEMS\n        });\n      } else {\n        return Ember.RSVP.resolve({\n          query: val,\n          results: FILTERED_ITEMS\n        });\n      }\n    });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"1hr1VD49\",\n      \"block\": \"{\\\"symbols\\\":[\\\"results\\\",\\\"item\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"list-filter\\\",null,[[\\\"filter\\\"],[[25,\\\"action\\\",[[19,0,[]],\\\"filterByCity\\\"],null]]],{\\\"statements\\\":[[0,\\\"      \\\"],[6,\\\"ul\\\"],[7],[0,\\\"\\\\n\\\"],[4,\\\"each\\\",[[19,1,[]]],null,{\\\"statements\\\":[[0,\\\"        \\\"],[6,\\\"li\\\"],[9,\\\"class\\\",\\\"city\\\"],[7],[0,\\\"\\\\n          \\\"],[1,[19,2,[\\\"city\\\"]],false],[0,\\\"\\\\n        \\\"],[8],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[2]},null],[0,\\\"      \\\"],[8],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    this.$('.list-filter input').val('San').keyup();\n\n    return (0, _wait.default)().then(function () {\n      assert.equal(_this2.$('.city').length, 1);\n      assert.equal(_this2.$('.city').text().trim(), 'San Francisco');\n    });\n  });\n});","define('super-rentals/tests/integration/components/location-map-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  var StubMapsService = Ember.Service.extend({\n    getMapElement: function getMapElement(location) {\n      this.set('calledWithLocation', location);\n      return document.createElement('div');\n    }\n  });\n\n  (0, _emberQunit.moduleForComponent)('location-map', 'Integration | Component | location map', {\n    integration: true,\n    beforeEach: function beforeEach() {\n      this.register('service:maps', StubMapsService);\n      this.inject.service('maps', { as: 'mapsService' });\n    }\n  });\n\n  (0, _emberQunit.test)('should append map element to container element', function (assert) {\n    this.set('myLocation', 'New York');\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"MYEt2hyi\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[25,\\\"location-map\\\",null,[[\\\"location\\\"],[[19,0,[\\\"myLocation\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n    assert.equal(this.$('.map-container').children().length, 1, 'the map element should be put on screen');\n    assert.equal(this.get('mapsService.calledWithLocation'), 'New York', 'a map of New York should be requested');\n  });\n});","define('super-rentals/tests/integration/components/rental-listing-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('rental-listing', 'Integration | Component | rental listing', {\n    integration: true\n  });\n\n  var rental = Ember.Object.create({\n    image: 'fake.png',\n    title: 'test-title',\n    owner: 'test-owner',\n    propertyType: 'test-type',\n    city: 'test-city',\n    bedrooms: 3\n  });\n\n  (0, _emberQunit.test)('should display rental details', function (assert) {\n    this.set('rentalObj', rental);\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"s7erpyrj\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[25,\\\"rental-listing\\\",null,[[\\\"rental\\\"],[[19,0,[\\\"rentalObj\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$('.listing h3').text(), 'test-title', 'Title: test-title');\n    assert.equal(this.$('.listing .owner').text().trim(), 'Owner: test-owner', 'Owner: test-owner');\n  });\n\n  (0, _emberQunit.test)('should toggle `wide` class on click', function (assert) {\n    this.set('rentalObj', rental);\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"s7erpyrj\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[25,\\\"rental-listing\\\",null,[[\\\"rental\\\"],[[19,0,[\\\"rentalObj\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$('.image.wide').length, 0, 'initially rendered small');\n\n    Ember.run(function () {\n      return document.querySelector('.image').click();\n    });\n    assert.equal(this.$('.image.wide').length, 1, 'rendered wide after click');\n\n    Ember.run(function () {\n      return document.querySelector('.image').click();\n    });\n    assert.equal(this.$('.image.wide').length, 0, 'rendered small after second click');\n  });\n});","define('super-rentals/tests/integration/helpers/rental-property-type-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('rental-property-type', 'helper:rental-property-type', {\n    integration: true\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.set('inputValue', '1234');\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"0PwxknhX\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[25,\\\"rental-property-type\\\",[[19,0,[\\\"inputValue\\\"]]],null],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'Standalone');\n  });\n});","define('super-rentals/tests/test-helper', ['super-rentals/tests/helpers/resolver', 'ember-qunit', 'ember-cli-qunit'], function (_resolver, _emberQunit, _emberCliQunit) {\n  'use strict';\n\n  (0, _emberQunit.setResolver)(_resolver.default);\n  (0, _emberCliQunit.start)();\n});","define('super-rentals/tests/tests.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('acceptance/list-rentals-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/list-rentals-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/destroy-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/module-for-acceptance.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/start-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/list-filter-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/list-filter-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/location-map-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/location-map-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/rental-listing-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/rental-listing-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/helpers/rental-property-type-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/helpers/rental-property-type-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/adapters/application-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/application-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/rentals-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/rentals-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/rentals/index-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/rentals/index-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/rental-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/rental-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/about-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/about-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/contact-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/contact-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/index-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/index-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/rentals-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/rentals-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/rentals/index-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/rentals/index-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/rentals/show-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/rentals/show-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/services/maps-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/maps-test.js should pass ESLint\\n\\n');\n  });\n});","define('super-rentals/tests/unit/adapters/application-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('adapter:application', 'Unit | Adapter | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var adapter = this.subject();\n    assert.ok(adapter);\n  });\n});","define('super-rentals/tests/unit/controllers/rentals-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:rentals', 'Unit | Controller | rentals', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('super-rentals/tests/unit/controllers/rentals/index-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:rentals/index', 'Unit | Controller | rentals/index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('super-rentals/tests/unit/models/rental-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('rental', 'Unit | Model | rental', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('super-rentals/tests/unit/routes/about-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:about', 'Unit | Route | about', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('super-rentals/tests/unit/routes/contact-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:contact', 'Unit | Route | contact', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('super-rentals/tests/unit/routes/index-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:index', 'Unit | Route | index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('super-rentals/tests/unit/routes/rentals-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:rentals', 'Unit | Route | rentals', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('super-rentals/tests/unit/routes/rentals/index-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:rentals/index', 'Unit | Route | rentals/index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('super-rentals/tests/unit/routes/rentals/show-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:rentals/show', 'Unit | Route | rentals/show', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('super-rentals/tests/unit/services/maps-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  var DUMMY_ELEMENT = {};\n\n  var MapUtilStub = Ember.Object.extend({\n    createMap: function createMap(element, location) {\n      this.assert.ok(element, 'createMap called with element');\n      this.assert.ok(location, 'createMap called with location');\n      return DUMMY_ELEMENT;\n    }\n  });\n\n  (0, _emberQunit.moduleFor)('service:maps', 'Unit | Service | maps');\n\n  (0, _emberQunit.test)('should create a new map if one is not cached for location', function (assert) {\n    assert.expect(4);\n    var stubMapUtil = MapUtilStub.create({ assert: assert });\n    var mapService = this.subject({ mapUtil: stubMapUtil });\n    var element = mapService.getMapElement('San Francisco');\n    assert.ok(element, 'element exists');\n    assert.equal(element.className, 'map', 'element has class name `map`');\n  });\n\n  (0, _emberQunit.test)('should use existing map if one is cached for location', function (assert) {\n    assert.expect(1);\n    var stubCachedMaps = Ember.Object.create({\n      sanFrancisco: DUMMY_ELEMENT\n    });\n    var mapService = this.subject({ cachedMaps: stubCachedMaps });\n    var element = mapService.getMapElement('San Francisco');\n    assert.equal(element, DUMMY_ELEMENT, 'element fetched from cache');\n  });\n});","require('super-rentals/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClhCA;AACA;","file":"tests.js"}